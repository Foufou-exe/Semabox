#!/usr/bin/env python3.11.1
# Description: Ce fichier contient des fonctions permettant de récupérer des informations sur le serveur sur lequel le code est exécuté.

"""
    Description:
        Ce module contient des fonctions permettant de récupérer des informations sur le serveur sur lequel le code est exécuté. 
        Les informations incluent le nom d'hôte, l'adresse IP, l'adresse IP publique, le nom de domaine, l'uid généré par generation_UID.py et la version de Semabox. 
        Il contient également des fonctions pour redémarrer ou éteindre le serveur, et pour vérifier si le serveur est en ligne.
"""


# Import des modules Python nécessaires
import socket # Pour récupérer l'adresse IP
import platform # Pour récupérer le nom d'hôte
import requests # Pour récupérer l'adresse IP publique
import ipaddress # Pour récupérer l'adresse de réseau
import sys


# Ajoute le chemin d'accès au module generation_UID.py
sys.path.append("Modules")
from Registre.generationUID import Registres
from Version.version import __version__

class InfoServer:
    @staticmethod
    def get_hostname() -> str:
        """
        This function returns the hostname of the machine on which the code is executed.
        """
        return platform.node()

    @staticmethod
    def get_ip_address() -> str:
        """
        This function returns the IP address of the machine on which the code is executed.
        """
        return socket.gethostbyname(socket.gethostname())

    @staticmethod
    def get_address_network(ip=None) -> str:
        """
        Description:
            This function retrieves the network address from an IP address and a subnet mask.

        Args:
            ip (str): IP address

        Returns:
            str: network address
        """
        if ip is None:
            ip = InfoServer.get_ip_address()

        # Create an object that contains the IP address and the subnet mask
        ip_obj = ipaddress.IPv4Interface(f"{ip}/24")

        # Retrieve the network address
        network = ip_obj.network

        return str(network)

    @staticmethod
    def get_dns() -> str:
        """
        This function returns the domain name associated with the specified IP address.

        Args:
            ip (str): IP address for which we want to retrieve the domain name.
        """
        dns_result = socket.gethostbyaddr(InfoServer.get_ip_address())

        return dns_result[0]

    @staticmethod
    def get_version_semabox() -> str:
        """
        This function returns the version of SemaBox by reading the "version.txt" file in the "Semabox" directory.
        """
        return __version__

    @staticmethod
    def get_public_ip() -> str:
        response = requests.get("http://ipinfo.io/json")
        data = response.json()
        return data["ip"]

    @staticmethod
    def api_get_public_ip(ip: str = None) -> dict:
        if ip is None:
            ip = InfoServer.get_public_ip()
        return {"ip_public": ip}

    @staticmethod
    def api_info_server() -> dict:
        """
        Description:
            This function returns a dictionary containing information about the server on which the code is executed,
            such as the hostname, IP address, public IP address, domain name, UID generated by generation_UID.py,
            and the version of SemaBox.
        """
        hostname = InfoServer.get_hostname()
        ip = InfoServer.get_ip_address()
        dns = InfoServer.get_dns()
        uid = Registres.lire_fichier() # Assuming lire_fichier() is a valid function defined elsewhere
        version = InfoServer.get_version_semabox()
        ip_public = InfoServer.get_public_ip()

        info_server = {
            'hostname': hostname,
            'ip': ip,
            'ip_public': ip_public,
            'dns': dns,
            'uid': uid,
            'version_semabox': version
        }

        return info_server
    
    
    
# Si ce fichier est exécuté directement, on appelle la fonction api_info_server()
if __name__ == "__main__":
    print(InfoServer.api_info_server())

