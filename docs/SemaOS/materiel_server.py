#!/usr/bin/env python3.11.1

"""
    Description: Ce module contient des fonctions qui permettent de r√©cup√©rer des informations sur le serveur ex√©cutant le script.

    Importation des modules Python n√©cessaires:
        psutil - Ce module permet de r√©cup√©rer des informations sur le syst√®me, notamment sur les ressources utilis√©es (CPU, RAM, disques, etc.).
        platform - Ce module permet de r√©cup√©rer des informations sur le syst√®me d'exploitation du serveur (nom, version, etc.).

    Fonctions:
        get_info_system() - Cette fonction retourne un dictionnaire contenant des informations sur le serveur ex√©cutant le script. 
        Les informations incluent le nombre de coeurs CPU, l'utilisation CPU, la quantit√© de m√©moire RAM, le nombre de disques, le temps √©coul√© depuis l'allumage et le nom de l'OS.
        cli_get_info_system
"""
# Importation des modules Python n√©cessaires
import psutil
import platform

# D√©finition des fonctions
def get_info_system()->dict:
    """
        Description:
            Cette fonction retourne un dictionnaire contenant des informations sur le serveur ex√©cutant le script. Les informations incluent le nombre de coeurs CPU, l'utilisation CPU, la quantit√© de m√©moire RAM, le nombre de disques, le temps √©coul√© depuis l'allumage et le nom de l'OS.
        
        Returns:
            dict: Un dictionnaire contenant les informations sur le serveur.
    """
    
    # R√©cup√©ration de l'utilisation CPU
    cpu_utilization = psutil.cpu_percent()

    # R√©cup√©ration du nombre de coeurs CPU
    num_cpus = psutil.cpu_count()

    # R√©cup√©ration de la quantit√© de m√©moire RAM
    memory = psutil.virtual_memory() 
    ram_size = "{0:.2f}".format(memory.total / (1024 ** 3))

    # R√©cup√©ration du nombre de disques
    num_disks = len(psutil.disk_partitions())
    
    # R√©cup√©ration de la taille d'un disque sp√©cifique
    disk_path = '/'  # Le chemin du disque que vous voulez r√©cup√©rer
    usage = psutil.disk_usage(disk_path)
    disk_size = int(usage.total / (1024 ** 3))
    
    # R√©cup√©ration du nom de l'OS
    os_name = platform.system()

    # R√©cup√©ration du temps √©coul√© depuis l'allumage
    uptime = psutil.boot_time()

    # Conversion du temps √©coul√© en heures
    uptime_hours = int(uptime / 3600)

    resultat = {
        'num_cpus': num_cpus,
        'cpu_utilization': cpu_utilization,
        'ram_size_go': ram_size,
        'disks': disk_size,
        'num_disks': num_disks,
        'uptime_hours': uptime_hours,
        'os_name': os_name
    }
    # Retour du dictionnaire
    print(resultat)
    


def cli_get_info_system()->dict:
    """
        Description:
            Cette fonction retourne un dictionnaire contenant des informations sur le serveur ex√©cutant le script. Les informations incluent le nombre de coeurs CPU, l'utilisation CPU, la quantit√© de m√©moire RAM, le nombre de disques, le temps √©coul√© depuis l'allumage et le nom de l'OS.
        
        Returns:
            dict: Un dictionnaire contenant les informations sur le serveur.
    """
    
    # R√©cup√©ration de l'utilisation CPU
    cpu_utilization = psutil.cpu_percent()

    # R√©cup√©ration du nombre de coeurs CPU
    num_cpus = psutil.cpu_count()

    # R√©cup√©ration de la quantit√© de m√©moire RAM
    memory = psutil.virtual_memory() 
    ram_size = "{0:.2f}".format(memory.total / (1024 ** 3))

    # R√©cup√©ration du nombre de disques
    num_disks = len(psutil.disk_partitions())
    
    # R√©cup√©ration de la taille d'un disque sp√©cifique
    disk_path = '/'  # Le chemin du disque que vous voulez r√©cup√©rer
    usage = psutil.disk_usage(disk_path)
    disk_size = int(usage.total / (1024 ** 3))
    
    # R√©cup√©ration du nom de l'OS
    os_name = platform.system()

    # R√©cup√©ration du temps √©coul√© depuis l'allumage
    uptime = psutil.boot_time()

    # Conversion du temps √©coul√© en heures
    uptime_hours = int(uptime / 3600)
    
    return {
        'Nombre de Coeur CPU': f"{num_cpus} ü´Ä",
        'CPU utilisation': f"{cpu_utilization}% üìà",
        'Taille RAM': f'{ram_size} Go',
        'Taille du Disque': f'{disk_size} Go',
        'Nombre de Disques': f'{num_disks} üíæ',
        'Allum√©e depuis': f'{uptime_hours} H üïí',
        'OS': f'{os_name} üñ•Ô∏è'
    } # Retour du dictionnaire

def api_get_info_system()->dict:
    """
        Description:
            Cette fonction retourne un dictionnaire contenant des informations sur le serveur ex√©cutant le script. Les informations incluent le nombre de coeurs CPU, l'utilisation CPU, la quantit√© de m√©moire RAM, le nombre de disques, le temps √©coul√© depuis l'allumage et le nom de l'OS.
        
        Returns:
            dict: Un dictionnaire contenant les informations sur le serveur.
    """
    
    # R√©cup√©ration de l'utilisation CPU
    cpu_utilization = psutil.cpu_percent()

    # R√©cup√©ration du nombre de coeurs CPU
    num_cpus = psutil.cpu_count()

    # R√©cup√©ration de la quantit√© de m√©moire RAM
    memory = psutil.virtual_memory() 
    ram_size = "{0:.2f}".format(memory.total / (1024 ** 3))

    # R√©cup√©ration du nombre de disques
    num_disks = len(psutil.disk_partitions())
    
    # R√©cup√©ration de la taille d'un disque sp√©cifique
    disk_path = '/'  # Le chemin du disque que vous voulez r√©cup√©rer
    usage = psutil.disk_usage(disk_path)
    disk_size = int(usage.total / (1024 ** 3))
    
    # R√©cup√©ration du nom de l'OS
    os_name = platform.system()

    # R√©cup√©ration du temps √©coul√© depuis l'allumage
    uptime = psutil.boot_time()

    # Conversion du temps √©coul√© en heures
    uptime_hours = int(uptime / 3600)
    
    return {
        'num_cpus': num_cpus,
        'cpu_utilization': cpu_utilization,
        'ram_size_go': ram_size,
        'disks': disk_size,
        'num_disks': num_disks,
        'uptime_hours': uptime_hours,
        'os_name': os_name
    } # Retour du dictionnaire

if __name__ == '__main__':
    # Affichage des informations du serveur
    get_info_system()